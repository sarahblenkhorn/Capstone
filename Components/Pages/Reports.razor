@page "/reports"
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject ApplicationDbContext Db
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Reports</h3>

<div class="user-header">
    <h2 class="form-title">Hello, Admin</h2>
</div>

<div class="admin-toolbar">
    <div class="btn-group btn-group-sm" role="group" aria-label="admin quick nav">
        <a class="btn btn-outline-secondary" href="/admin">Requests/Inventory</a>
        <a class="btn btn-outline-primary" href="/reports">Reports</a>
    </div>
</div>

<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Closed Requests</span>
        <div>
            <input type="date" @bind="from" class="form-control form-control-sm d-inline-block" style="width:160px" />
            <input type="date" @bind="to" class="form-control form-control-sm d-inline-block ms-1" style="width:160px" />
            <button class="btn btn-sm btn-outline-primary ms-2" @onclick="ExportClosedCsv">Export CSV</button>
        </div>
    </div>
    <div class="card-body p-0">
        <table class="table mb-0">
            <thead><tr><th>Closed</th><th>Requester</th><th>Equipment</th><th>Status</th><th>Note</th></tr></thead>
            <tbody>
                @foreach (var r in closed)
                {
                    <tr>
                        <td>@r.ClosedAt?.ToLocalTime().ToString("g")</td>
                        <td>@r.RequesterName (@r.Email)</td>
                        <td>@r.EquipmentType @r.EquipmentModel @r.EquipmentSerial</td>
                        <td>@r.Status</td>
                        <td>@r.CloseNote</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private DateTime from = DateTime.Today.AddDays(-30), to = DateTime.Today;
    private List<EquipmentRequest> closed = new();

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        closed = await Db.EquipmentRequests
          .Where(r => r.IsClosed && r.ClosedAt >= from && r.ClosedAt < to.AddDays(1))
          .OrderByDescending(r => r.ClosedAt).ToListAsync();
    }

    private async Task ExportClosedCsv()
    {
        await LoadAsync();
        var sb = new System.Text.StringBuilder();
        sb.AppendLine($"Closed Requests Report,Generated {DateTime.Now:g}");
        sb.AppendLine("Closed,Requester,Email,Equipment,Model,Serial,Status,Note");
        foreach (var r in closed)
            sb.AppendLine($"{r.ClosedAt:g},{r.RequesterName},{r.Email},{r.EquipmentType},{r.EquipmentModel},{r.EquipmentSerial},{r.Status},\"{r.CloseNote}\"");

        var bytes = System.Text.Encoding.UTF8.GetBytes(sb.ToString());
        await JS.InvokeVoidAsync("downloadBytes", "closed-requests.csv", "text/csv", bytes);
    }
}
