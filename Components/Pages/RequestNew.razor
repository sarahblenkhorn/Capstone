@page "/request/new"
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject ApplicationDbContext Db

@code {
    private EquipmentRequest model = new();
    private string? error;

    [SupplyParameterFromQuery(Name = "return")]
    public string? Return { get; set; }

    private async Task HandleSubmit()
    {
        error = null;
        try
        {
            model.Status = "Pending";
            model.SubmittedAt = DateTime.UtcNow;

            Db.EquipmentRequests.Add(model);
            await Db.SaveChangesAsync();

            var dest = string.IsNullOrWhiteSpace(Return) ? "/user" : Return!;
            Nav.NavigateTo(dest);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void Cancel()
    {
        var dest = string.IsNullOrWhiteSpace(Return) ? "/user" : Return!;
        Nav.NavigateTo(dest);
    }
}

<style>
    .form-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background: #f8f9fa;
    }

    .form-box {
        width: 100%;
        max-width: 520px;
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,.1);
        padding: 2rem;
        position: relative;
    }

    .form-title {
        text-align: center;
        font-size: 1.25rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .form-input, .form-select, .form-textarea {
        width: 100%;
        margin: .5rem 0;
        padding: .7rem .9rem;
        border: 1px solid #9a9a9a;
        border-radius: 6px;
        font-size: 1rem;
    }

    .form-textarea {
        min-height: 110px;
        resize: vertical;
    }

    .submit-wrap {
        display: flex;
        gap: .5rem;
        justify-content: center;
        margin-top: 1rem;
    }

    .submit-btn {
        width: 160px;
        padding: .6rem 1rem;
        border: none;
        border-radius: 8px;
        background: #222;
        color: #fff;
        font-weight: 600;
        cursor: pointer;
    }

    .cancel-btn {
        width: 120px;
        padding: .6rem 1rem;
        border: 1px solid #888;
        border-radius: 8px;
        background: #fff;
        cursor: pointer;
    }
</style>

<div class="form-container">
    <div class="form-box">
        <h3 class="form-title">Equipment Request Form</h3>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger" role="alert">@error</div>
        }

        <EditForm Model="model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <input class="form-input" placeholder="Name" @bind="model.RequesterName" />
            <input class="form-input" placeholder="Email" @bind="model.Email" />
            <input class="form-input" placeholder="Your Department" @bind="model.Department" />
            <input class="form-input" placeholder="Manager's Email" @bind="model.ManagerEmail" />

            <select class="form-select" @bind="model.EquipmentType">
                <option value="">Type of Equipment</option>
                <option>Laptop</option>
                <option>Monitor</option>
                <option>Keyboard</option>
                <option>Mouse</option>
                <option>Dock</option>
                <option>Headset</option>
            </select>

            <input class="form-input" placeholder="Equipment Model" @bind="model.EquipmentModel" />
            <input class="form-input" placeholder="Equipment Serial Number" @bind="model.EquipmentSerial" />

            <textarea class="form-textarea" placeholder="Reason for request" @bind="model.Reason"></textarea>

            <div class="submit-wrap">
                <button type="submit" class="submit-btn">Submit</button>
                <button type="button" class="cancel-btn" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>
