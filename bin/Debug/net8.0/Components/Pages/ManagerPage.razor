@page "/manager"
@page "/ManagerPage"
@inject ApplicationDbContext Db
@inject NavigationManager Nav
@inject IJSRuntime JS
@rendermode InteractiveServer

<style>
    .user-container { display:flex; justify-content:center; align-items:center; min-height:100vh; background:#f8f9fa; }
    .user-box { width:100%; max-width:700px; padding:2rem; border:1px solid #ccc; border-radius:10px; box-shadow:0 4px 10px rgba(0,0,0,.1); background:#fff; position:relative; }
    .signout-link { position:absolute; top:1rem; right:1rem; }
    .user-header { text-align:center; margin-top:2rem; }
    .request-list { list-style:none; padding-left:0; }
    .request-list li { display:flex; justify-content:space-between; align-items:center; padding:.35rem 0; gap:.75rem; }
    .status-approved { color:green; font-weight:700; }
    .status-denied { color:red; font-weight:700; }
    .status-pending { color:orange; font-weight:700; }
    .status-neutral { color:gray; font-weight:700; }
    .req-meta { font-size:.9rem; color:#6c757d; }
</style>

<div class="user-container">
 <div class="user-box">
   <a class="signout-link" href="/login">Sign out</a>

   <div class="user-header">
     <h2 class="form-title">Hello, Manager</h2>
            <button class="btn btn-primary mt-2" @onclick="GoToNew">Submit a New Request</button>
   </div>

   <h4 class="mt-4">Approval Requests</h4>
   <hr />

   @if (loading)         { <p>Loading…</p> }
   else if (loadError != null) { <div class="alert alert-danger">@loadError</div> }
   else
   {
     @if (approvals.Count == 0)
     {
        <p>No approval requests right now.</p>
     }
     else
     {
       <ul class="request-list">
         @foreach (var r in approvals)
         {
           <li>
             <div>
               <a href="@($"/request/{r.Id}?from=manager")"><strong>@r.RequesterName</strong> • @r.Email</a>
               <div class="req-meta">
                 @r.SubmittedAt.ToLocalTime().ToString("g") · @r.Department · @r.EquipmentType
                 @if (!string.IsNullOrWhiteSpace(r.Reason)) { <text> · @r.Reason</text> }
               </div>
             </div>

             <div class="d-flex gap-2">
               <button class="btn btn-outline-success btn-sm" @onclick="() => Approve(r.Id)">Approve</button>
               <button class="btn btn-outline-danger btn-sm"  @onclick="() => Deny(r.Id)">Deny</button>
             </div>
           </li>
         }
       </ul>
     }

     <h4 class="mt-4">My Requests</h4>
     <hr />

     @if (mine.Count == 0)
     {
        <p>You haven’t submitted any requests.</p>
     }
     else
     {
       <ul class="request-list">
         @foreach (var r in mine)
         {
           <li>
             <div>
               <a href="@($"/request/{r.Id}?from=manager")">Request @r.Id</a>
               <div class="req-meta">
                 @r.SubmittedAt.ToLocalTime().ToString("g") · @r.EquipmentType
               </div>
             </div>
             <span class="@StatusClass(r.Status)">@r.Status</span>
           </li>
         }
       </ul>
     }
   }
 </div>
</div>

@code {
  private string currentUserEmail = "manager@test.com";

  private bool loading = true;
  private string? loadError;
  private List<EquipmentRequest> approvals = new();
  private List<EquipmentRequest> mine = new();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      loading = true;

      approvals = await Db.EquipmentRequests
        .Where(r => r.ManagerEmail == currentUserEmail &&
                    (r.Status == "Pending" || r.Status == "Needs More Info"))
        .OrderBy(r => r.SubmittedAt)
        .ToListAsync();

      mine = await Db.EquipmentRequests
        .Where(r => r.Email == currentUserEmail)
        .OrderByDescending(r => r.SubmittedAt)
        .ToListAsync();
    }
    catch (Exception ex) { loadError = ex.Message; }
    finally { loading = false; }
  }

  private string StatusClass(string status) => status switch
  {
    "Approved" => "status-approved",
    "Denied" => "status-denied",
    "Needs More Info" or "Pending" => "status-pending",
    "Returned" or "Cancelled" => "status-neutral",
    _ => "status-neutral"
  };

  private async Task Approve(int id)
  {
    var r = await Db.EquipmentRequests.FindAsync(id);
    if (r is null) return;
    r.Status = "Approved";
    await Db.SaveChangesAsync();
    approvals.RemoveAll(x => x.Id == id);
    StateHasChanged();
  }

  private async Task Deny(int id)
  {
    var r = await Db.EquipmentRequests.FindAsync(id);
    if (r is null) return;
    r.Status = "Denied";
    r.IsClosed = true;
    await Db.SaveChangesAsync();
    approvals.RemoveAll(x => x.Id == id);
    StateHasChanged();
  }

    private void GoToNew() => Nav.NavigateTo("/request/new?return=/manager");

}
