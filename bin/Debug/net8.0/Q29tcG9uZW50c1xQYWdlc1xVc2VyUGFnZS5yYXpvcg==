@page "/user"
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Nav
@inject ApplicationDbContext Db
@rendermode InteractiveServer

<style>
    .user-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: #f8f9fa;
        padding: 24px 16px;
    }

    .user-box {
        width: 100%;
        max-width: 700px;
        padding: 2rem;
        border: 1px solid #ccc;
        border-radius: 10px;
        background: #fff;
        box-shadow: 0 4px 10px rgba(0,0,0,.1);
        position: relative;
    }

    .signout-link {
        position: absolute;
        top: 1rem;
        right: 1rem;
    }

    .user-header {
        text-align: center;
        margin-top: .5rem;
    }

    .request-button {
        display: flex;
        justify-content: center;
        margin: 1rem 0 .5rem;
    }

    .section-title {
        font-size: 1.1rem;
        font-weight: 700;
        margin: .75rem 0 .25rem;
    }

    .scroll-pane {
        max-height: 320px;
        overflow-y: auto;
        padding-right: .25rem;
    }

    .request-list {
        padding-left: 0;
        margin-left: 0;
    }

        .request-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: .5rem 0;
            gap: .75rem;
            border-bottom: 1px solid #f1f1f1;
        }

    .req-main {
        flex: 1 1 auto;
        min-width: 0;
    }

    .req-title {
        font-weight: 600;
        display: block;
    }

    .req-meta {
        font-size: .9rem;
        color: #6c757d;
    }

    .request-status {
        min-width: 140px;
        text-align: right;
    }

    .status-approved {
        color: green;
        font-weight: bold;
    }

    .status-denied {
        color: red;
        font-weight: bold;
    }

    .status-pending {
        color: orange;
        font-weight: bold;
    }

    .status-neutral {
        color: gray;
        font-weight: bold;
    }
</style>

<div class="user-container">
    <div class="user-box">
        <a href="/login" class="signout-link">Sign out</a>

        <div class="user-header">
            <h2 class="form-title">Hello, @DisplayName</h2>
        </div>

        <div class="request-button">
            <button class="btn btn-primary" @onclick="HandleNew">Submit a New Request</button>
        </div>

        @if (!string.IsNullOrEmpty(loadError))
        {
            <div class="alert alert-danger">@loadError</div>
        }
        else if (allRequests is null)
        {
            <p class="text-center">Loading…</p>
        }
        else
        {
            <!-- Current (Pending) -->
            <h3 class="section-title">Current Requests</h3>
            <hr class="mt-1 mb-2" />
            @if (pendingRequests.Count == 0)
            {
                <p class="text-muted">No current requests.</p>
            }
            else
            {
                <div class="scroll-pane">
                    <ul class="list-unstyled request-list">
                        @foreach (var r in pendingRequests)
                        {
                            <li>
                                <div class="req-main">
                                    <a class="req-title" href="@($"/request/{r.Id}")">Request @r.Id</a>
                                    <div class="req-meta">
                                        Submitted @r.SubmittedAt.ToLocalTime().ToString("g")
                                        &middot; @r.EquipmentType
                                        @if (!string.IsNullOrWhiteSpace(r.EquipmentModel))
                                        {
                                            <text>&middot; Model @r.EquipmentModel</text>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(r.EquipmentSerial))
                                        {
                                            <text>&middot; Serial @r.EquipmentSerial</text>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(r.Reason))
                                        {
                                            <text>&middot; Reason: @r.Reason</text>
                                        }
                                    </div>
                                </div>
                                <span class="request-status @StatusClass(r.Status)">@r.Status</span>
                            </li>
                        }
                    </ul>
                </div>
            }

            <!-- Past -->
            <h3 class="section-title mt-3">Past Requests</h3>
            <hr class="mt-1 mb-2" />
            @if (pastRequests.Count == 0)
            {
                <p class="text-muted">No past requests yet.</p>
            }
            else
            {
                <div class="scroll-pane">
                    <ul class="list-unstyled request-list">
                        @foreach (var r in pastRequests)
                        {
                            <li>
                                <div class="req-main">
                                    <a class="req-title" href="@($"/request/{r.Id}")">Request @r.Id</a>
                                    <div class="req-meta">
                                        Submitted @r.SubmittedAt.ToLocalTime().ToString("g")
                                        &middot; @r.EquipmentType
                                        @if (!string.IsNullOrWhiteSpace(r.EquipmentModel))
                                        {
                                            <text>&middot; Model @r.EquipmentModel</text>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(r.EquipmentSerial))
                                        {
                                            <text>&middot; Serial @r.EquipmentSerial</text>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(r.Reason))
                                        {
                                            <text>&middot; Reason: @r.Reason</text>
                                        }
                                    </div>
                                </div>
                                <span class="request-status @StatusClass(r.Status)">@r.Status</span>
                            </li>
                        }
                    </ul>
                </div>
            }
        }
    </div>
</div>

@code {
    private string DisplayName = "User";
    private List<EquipmentRequest>? allRequests;
    private List<EquipmentRequest> pendingRequests = new();
    private List<EquipmentRequest> pastRequests = new();
    private string? loadError;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        try
        {
            allRequests = await Db.EquipmentRequests
              .Where(r => !r.IsClosed)
              .OrderByDescending(r => r.SubmittedAt)
              .ToListAsync();

            pendingRequests = allRequests
              .Where(r => r.Status == "Pending" || r.Status == "Needs More Info" || r.Status == "Approved")
              .ToList();

            pastRequests = allRequests
              .Where(r => !(r.Status == "Pending" || r.Status == "Needs More Info"))
              .ToList();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }

    private void HandleNew() => Nav.NavigateTo("/request/new");

    private static string StatusClass(string status) => status switch
    {
        "Approved" => "status-approved",
        "Denied" => "status-denied",
        "Needs More Info" or "Pending" => "status-pending",
        "Cancelled" => "status-neutral",
        _ => "status-neutral"
    };
}
