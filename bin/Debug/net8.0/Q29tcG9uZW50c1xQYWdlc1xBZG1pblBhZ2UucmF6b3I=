@page "/admin"
@page "/AdminPage"
@using Microsoft.EntityFrameworkCore
@using Capstone_Inventory_Project.Models
@inject ApplicationDbContext Db
@inject NavigationManager Nav
@inject IJSRuntime JS
@rendermode InteractiveServer

<style>
  /* Scroll containers */
  .scroll-box{ overflow-y:auto; border:1px solid #e5e7eb; border-radius:6px; max-height:none; -webkit-overflow-scrolling:touch; }
  .scroll-tight{ max-height:260px; } /* cap when > 3 rows */
  .scroll-box thead th{ position:sticky; top:0; background:#fff; z-index:1; }

  /* Layout & table styles */
  .user-container{ display:flex; justify-content:center; align-items:center; background:#f8f9fa; min-height:100vh; }
  .user-box{ width:100%; max-width:1000px; padding:2.25rem; border:1px solid #ccc; border-radius:10px; background:#fff; box-shadow:0 4px 10px rgba(0,0,0,.1); position:relative; }
  .signout-link{ position:absolute; top:1rem; right:1rem; }
  .user-header{ text-align:center; margin-top:1rem; }
  .section-title{ font-size:1.6rem; font-weight:700; margin:1.75rem 0 .5rem; }
  .section-title + hr{ margin:.4rem 0 1.1rem; }
  .small-muted{ font-size:.9rem; color:#6b7280; margin-top:2px; }
  .req-meta{ display:grid; gap:2px; }

  .table{ width:100%; border-collapse:separate; border-spacing:0 8px; }
  .table thead th{ padding:12px 16px; font-weight:700; border-bottom:2px solid #e5e7eb; }
  .table tbody tr{ background:#fff; box-shadow:0 1px 0 rgba(0,0,0,.03); }
  .table td, .table th{ vertical-align:middle; }
  .table tbody td{ padding:14px 16px; }

  .text-end{ text-align:right; }
  .btn + .btn{ margin-left:8px; }
  .block{ margin-bottom:28px; }
</style>

<div class="user-container">
  <div class="user-box">
    <a class="signout-link" href="/login">Sign out</a>

    <div class="user-header">
      <h2 class="form-title">Hello, Admin</h2>
    </div>

    <!-- Current Requests -->
    <div class="block">
      <h2 class="section-title">Current Requests</h2>
      <hr />
      @if (_requests is null)
      {
        <p>Loading…</p>
      }
      else if (_requests.Count == 0)
      {
        <p>No requests yet.</p>
      }
      else
      {
        <div class="@( (_requests?.Count ?? 0) > 3 ? "scroll-box scroll-tight" : null )">
          <table class="table">
            <thead>
              <tr>
                <th>Submitted</th>
                <th>Requester</th>
                <th>Equipment</th>
                <th>Status</th>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              @foreach (var r in _requests)
              {
                var key = r.EquipmentType ?? string.Empty;
                _availableCounts.TryGetValue(key, out var availableCount);
                var canAssign = r.Status == "Approved" && availableCount > 0;

                <tr>
                  <td>@r.SubmittedAt.ToLocalTime().ToString("g")</td>
                  <td>
                    <div class="req-meta">
                      <strong>@r.RequesterName</strong>
                      <div class="small-muted">@r.Email</div>
                    </div>
                  </td>
                  <td>
                    <div>@r.EquipmentType</div>
                    @if (!string.IsNullOrWhiteSpace(r.Reason))
                    {
                      <div class="small-muted">@r.Reason</div>
                    }
                  </td>
                  <td>
                    @switch (r.Status)
                    {
                      case "Approved":
                        <span style="color:#0b7a28;font-weight:700">Approved</span>
                        break;
                      case "Denied":
                        <span style="color:#9b1c1c;font-weight:700">Denied</span>
                        break;
                      case "Pending":
                        <span style="color:#8a6d00;font-weight:700">Pending</span>
                        break;
                      case "Fulfilled":
                        <span style="color:#2563eb;font-weight:700">Fulfilled</span>
                        break;
                      default:
                        <span>@r.Status</span>
                        break;
                    }
                  </td>
                                    <td class="text-end">
                                        @if (canAssign)
                                        {
                                            <button class="btn btn-sm btn-dark mb-1" disabled="@_busy"
                                                    @onclick="@(() => AssignFirstAvailableAsync(r.Id))">
                                                Quick Assign (@availableCount)
                                            </button>

                                            <div class="d-inline-flex align-items-center" style="gap:.25rem; max-width: 420px;">
                                                <select class="form-select form-select-sm"
                                                        style="min-width: 220px;"
                                                        @onchange="e => OnSelectItem(r.Id, e.Value?.ToString())">
                                                    <option value="">Choose specific item…</option>
                                                    @foreach (var it in AvailFor(r.EquipmentType))
                                                    {
                                                        <option value="@it.Id">
                                                            @($"{it.EquipmentType} · {(it.EquipmentModel ?? "-")} · {(it.EquipmentSerial ?? "-")}")
                                                        </option>
                                                    }
                                                </select>

                                                <button class="btn btn-sm btn-outline-dark"
                                                        disabled="@((SelectedIdOrZero(r.Id) == 0) || _busy)"
                                                        @onclick="@(() => AssignSpecificAsync(r.Id, SelectedIdOrZero(r.Id)))">
                                                    Assign
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-secondary mb-1" disabled>
                                                Assign Inventory
                                            </button>
                                        }

                                        <button class="btn btn-sm btn-outline-success mb-1" disabled="@_busy"
                                                @onclick="@(() => MarkRequestReturnedAsync(r.Id))">
                                            Returned
                                        </button>

                                        <button class="btn btn-sm btn-outline-danger" disabled="@_busy"
                                                @onclick="@(() => CloseRequestAsync(r.Id))">
                                            Close
                                        </button>
                                    </td>

                </tr>
              }
            </tbody>
          </table>
        </div>
      }
    </div>

    <!-- Current Inventory -->
    <div class="block">
      <h2 class="section-title">Current Inventory</h2>
      <hr />
      @if (_currentInv is null)
      {
        <p>Loading…</p>
      }
      else if (_currentInv.Count == 0)
      {
        <p>No inventory items yet.</p>
      }
      else
      {
        <div class="@( (_currentInv?.Count ?? 0) > 3 ? "scroll-box scroll-tight" : null )">
          <table class="table table-striped">
            <thead>
              <tr>
                <th>Equipment</th>
                <th>Model</th>
                <th>Serial #</th>
                <th>Status</th>
                <th>Assigned To</th>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
                        <tbody>
                            @foreach (var i in _currentInv)
                            {
                                <tr>
                                    <td>@i.EquipmentType</td>
                                    <td>@(string.IsNullOrWhiteSpace(i.EquipmentModel) ? "-" : i.EquipmentModel)</td>
                                    <td>@(string.IsNullOrWhiteSpace(i.EquipmentSerial) ? "-" : i.EquipmentSerial)</td>
                                    <td>@i.Status</td>
                                    <td>@(string.IsNullOrWhiteSpace(i.AssignedTo) ? "-" : i.AssignedTo)</td>

                                    <td class="text-end">

                                        @if (i.Status == "Available")
                                        {
                                            <button class="btn btn-outline-danger btn-sm"
                                                    @onclick="() => Recycle(i.Id)">
                                                Recycle
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="small-muted">—</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
          </table>
        </div>
      }
    </div>

    <!-- Returned Inventory -->
    <div class="block">
      <h2 class="section-title">Returned Inventory</h2>
      <hr />
      @if (_returnedInv is null)
      {
        <p>Loading…</p>
      }
      else if (_returnedInv.Count == 0)
      {
        <p>No returned items.</p>
      }
      else
      {
        <div class="@( (_returnedInv?.Count ?? 0) > 3 ? "scroll-box scroll-tight" : null )">
          <table class="table">
            <thead>
              <tr>
                <th>Equipment</th>
                <th>Model</th>
                <th>Serial #</th>
                <th>Returned</th>
                <th style="width:240px;" class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              @foreach (var r in _returnedInv)
              {
                <tr>
                  <td>@r.EquipmentType</td>
                  <td>@(string.IsNullOrWhiteSpace(r.EquipmentModel) ? "-" : r.EquipmentModel)</td>
                  <td>@(string.IsNullOrWhiteSpace(r.EquipmentSerial) ? "-" : r.EquipmentSerial)</td>
                  <td>@r.ReturnDate?.ToLocalTime().ToString("g")</td>
                  <td class="text-end">
                    <button class="btn btn-outline-primary btn-sm"
                            @onclick="() => MoveToInventory(r.Id)">
                      Move to Inventory
                    </button>
                    <button class="btn btn-outline-danger btn-sm"
                            @onclick="() => Recycle(r.Id)">
                      Recycle
                    </button>
                  </td>
                </tr>
              }
            </tbody>
          </table>
        </div>
      }
    </div>

        <!-- Recycled Inventory -->
        <div class="block">
            <h2 class="section-title">Recycled Inventory</h2>
            <hr />
            @if (_recycledInv is null)
            {
                <p>Loading…</p>
            }
            else if (_recycledInv.Count == 0)
            {
                <p>No recycled items.</p>
            }
            else
            {
                <div class="@((_recycledInv?.Count ?? 0) > 3 ? "scroll-box scroll-tight" : null)">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Equipment</th>
                                <th>Model</th>
                                <th>Serial #</th>
                                <th>Recycled</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var i in _recycledInv)
                            {
                                <tr>
                                    <td>@i.EquipmentType</td>
                                    <td>@(string.IsNullOrWhiteSpace(i.EquipmentModel) ? "-" : i.EquipmentModel)</td>
                                    <td>@(string.IsNullOrWhiteSpace(i.EquipmentSerial) ? "-" : i.EquipmentSerial)</td>
                                    <td>@i.ReturnDate?.ToLocalTime().ToString("g")</td>
                                    <td class="text-end">

                                        <button class="btn btn-outline-primary btn-sm"
                                                @onclick="() => MoveToInventory(i.Id)">
                                            Restore
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>


    <!-- Closed Requests -->
    <div class="block">
      <h2 class="section-title">Closed Requests</h2>
      <hr />
      @if (_closed is null)
      {
        <p>Loading…</p>
      }
      else if (_closed.Count == 0)
      {
        <p>No closed requests.</p>
      }
      else
      {
        <div class="@( (_closed?.Count ?? 0) > 3 ? "scroll-box scroll-tight" : null )">
          <table class="table">
            <thead>
              <tr>
                <th>Closed</th>
                <th>Requester</th>
                <th>Equipment</th>
                <th>Status at Close</th>
                <th>Note</th>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              @foreach (var r in _closed)
              {
                <tr>
                  <td>@r.ClosedAt?.ToLocalTime().ToString("g")</td>
                  <td>
                    <div class="req-meta">
                      <strong>@r.RequesterName</strong>
                      <div class="small-muted">@r.Email</div>
                    </div>
                  </td>
                  <td>@r.EquipmentType</td>
                  <td>@r.Status</td>
                  <td>@(string.IsNullOrWhiteSpace(r.CloseNote) ? "-" : r.CloseNote)</td>
                  <td class="text-end">
                    <button class="btn btn-sm btn-outline-primary"
                            @onclick="() => ReopenAsync(r.Id)">
                      Reopen
                    </button>
                  </td>
                </tr>
              }
            </tbody>
          </table>
        </div>
      }
    </div>
  </div>
</div>

@code {
  private List<EquipmentRequest>? _requests;
  private List<InventoryItem>? _currentInv;
  private List<InventoryItem>? _returnedInv;
  private List<EquipmentRequest>? _closed;

  private Dictionary<string,int> _availableCounts = new(StringComparer.OrdinalIgnoreCase);

    private List<InventoryItem>? _recycledInv;

  private Dictionary<string, List<InventoryItem>> _availableByType
      = new(StringComparer.OrdinalIgnoreCase);

  private Dictionary<int, int> _selectedItemForRequest = new();

  private bool _busy;

  protected override async Task OnInitializedAsync() => await LoadAsync();

  private async Task LoadAsync()
  {
    _requests = await Db.EquipmentRequests
      .Where(r => !r.IsClosed && r.Status != "Returned")
      .OrderByDescending(r => r.SubmittedAt)
      .ToListAsync();

    _currentInv = await Db.InventoryItems
      .Where(i => i.Status == "Available" || i.Status == "Assigned")
      .OrderBy(i => i.EquipmentType).ThenBy(i => i.Status)
      .ToListAsync();

    _returnedInv = await Db.InventoryItems
      .Where(i => i.Status == "Returned")
      .OrderByDescending(i => i.ReturnDate)
      .ToListAsync();

    _availableCounts = await Db.InventoryItems
      .Where(i => i.Status == "Available")
      .GroupBy(i => i.EquipmentType)
      .Select(g => new { Key = g.Key ?? "", Count = g.Count() })
      .ToDictionaryAsync(x => x.Key, x => x.Count, StringComparer.OrdinalIgnoreCase);

    _availableByType = await Db.InventoryItems
      .Where(i => i.Status == "Available")
      .OrderBy(i => i.EquipmentType).ThenBy(i => i.EquipmentModel).ThenBy(i => i.EquipmentSerial)
      .GroupBy(i => i.EquipmentType ?? "")
      .ToDictionaryAsync(g => g.Key, g => g.ToList(), StringComparer.OrdinalIgnoreCase);

    _closed = await Db.EquipmentRequests
      .Where(r => r.IsClosed)
      .OrderByDescending(r => r.ClosedAt)
      .ThenByDescending(r => r.SubmittedAt)
      .ToListAsync();

    _recycledInv = await Db.InventoryItems
      .Where(i => i.Status == "Recycled")
      .OrderByDescending(i => i.ReturnDate)
      .ToListAsync();
  }

  private List<InventoryItem> AvailFor(string? type)
      => _availableByType.TryGetValue(type ?? "", out var list) ? list : new List<InventoryItem>();

    private void OnSelectItem(int requestId, string? value)
    {
        if (int.TryParse(value, out var id)) _selectedItemForRequest[requestId] = id;
        else _selectedItemForRequest.Remove(requestId);
    }

  private async Task AssignSpecificAsync(int requestId, int itemId)
  {
    if (_busy) return; _busy = true;
    try
    {
      var req  = await Db.EquipmentRequests.FirstOrDefaultAsync(r => r.Id == requestId);
      var item = await Db.InventoryItems.FirstOrDefaultAsync(i => i.Id == itemId && i.Status == "Available");
      if (req is null || item is null) return;

      if (!string.Equals(item.EquipmentType ?? "", req.EquipmentType ?? "", StringComparison.OrdinalIgnoreCase))
        return;

      item.Status = "Assigned";
      item.AssignedTo = req.Email;
      item.AssignedRequestId = req.Id;
      item.AssignedAt = DateTime.UtcNow;

      req.Status = "Fulfilled";

      await Db.SaveChangesAsync();
      _selectedItemForRequest.Remove(requestId);
      await LoadAsync();
      StateHasChanged();
    }
    finally { _busy = false; }
  }

  private async Task AssignFirstAvailableAsync(int requestId)
  {
    if (_busy) return; _busy = true;
    try
    {
      var req = await Db.EquipmentRequests.FirstOrDefaultAsync(r => r.Id == requestId);
      if (req is null) return;

      var item = await Db.InventoryItems
        .Where(i => i.EquipmentType == req.EquipmentType && i.Status == "Available")
        .OrderBy(i => i.Id)
        .FirstOrDefaultAsync();

      if (item is null) return;

      item.Status = "Assigned";
      item.AssignedTo = req.Email;
      item.AssignedRequestId = req.Id;
      item.AssignedAt = DateTime.UtcNow;

      req.Status = "Fulfilled";

      await Db.SaveChangesAsync();
      await LoadAsync();
      StateHasChanged();
    }
    finally { _busy = false; }
  }

  private async Task CloseRequestAsync(int requestId)
  {
    if (_busy) return; _busy = true;
    try
    {
      var req = await Db.EquipmentRequests.FirstOrDefaultAsync(r => r.Id == requestId);
      if (req is null) return;

      req.IsClosed = true;
      req.ClosedAt = DateTime.UtcNow;
      req.CloseNote = string.IsNullOrWhiteSpace(req.CloseNote) ? "Closed by admin." : req.CloseNote;

      await Db.SaveChangesAsync();
      await LoadAsync();
      StateHasChanged();
    }
    finally { _busy = false; }
  }

  // Request → Returned
  private async Task MarkRequestReturnedAsync(int requestId)
  {
    if (_busy) return; _busy = true;
    try
    {
      var req = await Db.EquipmentRequests.FirstOrDefaultAsync(r => r.Id == requestId);
      if (req is null) return;

      req.Status = "Returned";

      var item = await Db.InventoryItems
        .FirstOrDefaultAsync(i => i.AssignedRequestId == req.Id);

      if (item is null)
      {
        item = await Db.InventoryItems
          .Where(i => i.Status == "Assigned" && i.EquipmentType == req.EquipmentType && i.AssignedTo == req.Email)
          .OrderBy(i => i.Id)
          .FirstOrDefaultAsync();
      }

      if (item is null)
      {
        var already = await Db.InventoryItems.AnyAsync(i => i.AssignedRequestId == req.Id && i.Status == "Returned");
        if (!already)
        {
          Db.InventoryItems.Add(new InventoryItem
          {
            EquipmentType   = req.EquipmentType,
            EquipmentModel  = req.EquipmentModel,
            EquipmentSerial = req.EquipmentSerial,
            Status          = "Returned",
            AssignedTo      = null,
            AssignedRequestId = req.Id,
            AssignedAt      = null,
            ReturnDate      = DateTime.UtcNow
          });
        }
      }
      else
      {
        if (string.IsNullOrWhiteSpace(item.EquipmentModel))  item.EquipmentModel  = req.EquipmentModel;
        if (string.IsNullOrWhiteSpace(item.EquipmentSerial)) item.EquipmentSerial = req.EquipmentSerial;
        if (string.IsNullOrWhiteSpace(item.EquipmentType))   item.EquipmentType   = req.EquipmentType;

        item.Status     = "Returned";
        item.ReturnDate = DateTime.UtcNow;
        item.AssignedTo = null;
      }

      await Db.SaveChangesAsync();
      await LoadAsync();
      StateHasChanged();
    }
    finally { _busy = false; }
  }

  // Returned → Move to Inventory
  private async Task MoveToInventory(int id)
  {
    var item = await Db.InventoryItems.FindAsync(id);
    if (item is null) return;

    item.Status = InventoryStatus.Available;
    item.ReturnDate = null;
    item.AssignedTo = null;
    item.AssignedAt = null;
    item.AssignedRequestId = null;

    await Db.SaveChangesAsync();
    await LoadAsync();
  }

  // Returned → Recycle
  private async Task Recycle(int id)
  {
    var confirm = await JS.InvokeAsync<bool>("confirm", "Recycle this item? It will be removed from Returned.");
    if (!confirm) return;

    var item = await Db.InventoryItems.FindAsync(id);
    if (item is null) return;

    item.Status = InventoryStatus.Recycled;
    item.ReturnDate ??= DateTime.UtcNow;

    await Db.SaveChangesAsync();
    await LoadAsync();
  }

  // Closed → Reopen (moves to Current Requests)
  private async Task ReopenAsync(int requestId)
  {
    if (_busy) return; _busy = true;
    try
    {
      var req = await Db.EquipmentRequests.FirstOrDefaultAsync(r => r.Id == requestId);
      if (req is null) return;

      req.IsClosed = false;
      req.ClosedAt = null;
      req.Status = "Pending";

      await Db.SaveChangesAsync();
      await LoadAsync();
      StateHasChanged();
    }
    finally { _busy = false; }
  }

    private int SelectedIdOrZero(int requestId) =>
      _selectedItemForRequest.TryGetValue(requestId, out var id) ? id : 0;
    }
}
