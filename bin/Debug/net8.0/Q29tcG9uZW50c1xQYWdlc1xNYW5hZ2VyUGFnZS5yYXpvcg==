@page "/manager"
@page "/ManagerPage"
@using Capstone_Inventory_Project.Models
@inject NavigationManager Nav
@inject ApplicationDbContext Db
@rendermode InteractiveServer

<style>
    .user-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f8f9fa;
    }

    .user-box {
        width: 100%;
        max-width: 700px;
        padding: 2rem;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        background-color: #fff;
        position: relative;
    }

    .signout-link {
        position: absolute;
        top: 1rem;
        right: 1rem;
    }

    .user-header {
        text-align: center;
        margin-top: 2rem;
    }

    .request-button {
        display: flex;
        justify-content: center;
        margin: 1.5rem 0;
    }

    .request-list {
        padding-left: 0;
        margin-left: 0;
    }

    .request-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: .25rem 0;
    }

    .request-status {
        min-width: 140px;
        text-align: right;
    }

    .status-approved {
        color: green;
        font-weight: bold;
    }

    .status-denied {
        color: red;
        font-weight: bold;
    }

    .status-pending {
        color: orange;
        font-weight: bold;
    }

    .status-neutral {
        color: gray;
        font-weight: bold;
    }

    .action-buttons {
        display: flex;
        gap: .5rem;
    }
</style>

<div class="user-container">
    <div class="user-box">
        <a href="/login" class="signout-link">Sign out</a>

        <div class="user-header">
            <h2 class="form-title">Hello, @DisplayName</h2>
        </div>

        <div class="request-button">
            <button class="btn btn-primary" @onclick="GoToNew">
                Submit a New Request
            </button>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-2">
            <h2 class="form-title mb-0">Approval Requests</h2>
        </div>
        <hr />

        @if (!string.IsNullOrEmpty(loadError))
        {
            <div class="alert alert-danger">@loadError</div>
        }
        else if (pending is null)
        {
            <p class="text-center">Loading…</p>
        }
        else if (pending.Count == 0)
        {
            <p class="text-center">No pending requests for your approval.</p>
        }
        else
        {
            <ul class="list-unstyled mt-3 request-list">
                @foreach (var r in pending)
                {
                    <li class="d-flex align-items-center justify-content-between mb-2">
                        <div>
                            <div><strong>@r.RequesterName</strong> · @r.Email</div>
                            <div class="small text-muted">
                                @r.SubmittedAt.ToLocalTime().ToString("g")
                                @if (!string.IsNullOrWhiteSpace(r.Department))
                                {
                                    <text> · @r.Department</text>
                                    ;
                                }
                                @if (!string.IsNullOrWhiteSpace(r.EquipmentType))
                                {
                                    <text> · @r.EquipmentType</text>
                                    ;
                                }
                            </div>
                            @if (!string.IsNullOrWhiteSpace(r.Reason))
                            {
                                <div class="small">@r.Reason</div>
                            }
                        </div>

                        <div class="action-buttons">
                            <button class="btn btn-sm btn-success"
                                    disabled="@busy"
                                    @onclick="@(() => ApproveAsync(r.Id))">
                                Approve
                            </button>
                            <button class="btn btn-sm btn-danger"
                                    disabled="@busy"
                                    @onclick="@(() => DenyAsync(r.Id))">
                                Deny
                            </button>
                        </div>
                    </li>
                }
            </ul>
        }

        <!-- My Requests -->
        <div class="d-flex justify-content-between align-items-center mb-2 mt-4">
            <h2 class="form-title mb-0">My Requests</h2>
        </div>
        <hr />

        @if (myRequests is null)
        {
            <p class="text-center">Loading…</p>
        }
        else if (myRequests.Count == 0)
        {
            <p class="text-center">No requests yet. <a href="/request/new">Create one</a>.</p>
        }
        else
        {
            <ul class="list-unstyled mt-3 request-list">
                @foreach (var r in myRequests)
                {
                    <li class="d-flex align-items-center justify-content-between mb-2">
                        <a href="@($"/request/{r.Id}")">Request @r.Id</a>
                        <span class="@StatusClass(r.Status) request-status">@r.Status</span>
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    private string DisplayName = "Manager";
    private List<EquipmentRequest>? pending;
    private List<EquipmentRequest>? myRequests;
    private string? loadError;
    private bool busy;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // TODO: when auth is wired, set this to the signed-in manager's email
            // and filter pending by r.ManagerEmail == myEmail.
            string myEmail = "";

            var query = Db.EquipmentRequests.Where(r => r.Status == "Pending");
            if (!string.IsNullOrWhiteSpace(myEmail))
                query = query.Where(r => r.ManagerEmail == myEmail);

            pending = await query.OrderBy(r => r.SubmittedAt).ToListAsync();

            // For now, mirror your User page (all requests). With auth, filter by r.Email == myEmail.
            myRequests = await Db.EquipmentRequests
                                 .OrderByDescending(r => r.SubmittedAt)
                                 .ToListAsync();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }

    private void GoToNew()
    {
        var back = Uri.EscapeDataString("/manager");
        Nav.NavigateTo($"/request/new?return={back}");
    }

    private Task ApproveAsync(int id) => UpdateStatusAsync(id, "Approved");
    private Task DenyAsync(int id) => UpdateStatusAsync(id, "Denied");

    private async Task UpdateStatusAsync(int id, string newStatus)
    {
        if (busy) return;
        busy = true;
        try
        {
            var req = await Db.EquipmentRequests.FirstOrDefaultAsync(r => r.Id == id);
            if (req is null) return;

            req.Status = newStatus;
            await Db.SaveChangesAsync();

            await OnInitializedAsync();
            StateHasChanged();
        }
        finally
        {
            busy = false;
        }
    }

    private static string StatusClass(string status) => status switch
    {
        "Approved" => "status-approved",
        "Denied" => "status-denied",
        "Needs More Info" or "Pending" => "status-pending",
        _ => "status-neutral"
    };
}
