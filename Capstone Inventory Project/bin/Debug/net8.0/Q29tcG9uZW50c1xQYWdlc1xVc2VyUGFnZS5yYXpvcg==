@page "/user"
@inject NavigationManager Nav
@inject ApplicationDbContext Db

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">

            <h3>Hello, @DisplayName</h3>
            <a href="/login">Sign out</a>

            <div class="mt-3 mb-4">
                <button class="btn btn-primary" @onclick="HandleNew">
                    Submit a New Request
                </button>
            </div>

            <hr />

            <h4>All Requests</h4>

            @if (!string.IsNullOrEmpty(loadError))
            {
                <div class="alert alert-danger">@loadError</div>
            }
            else if (requests is null)
            {
                <p>Loading…</p>
            }
            else if (requests.Count == 0)
            {
                <p>No requests yet.</p>
            }
            else
            {
                <ul class="list-unstyled">
                    @foreach (var r in requests)
                    {
                        <li class="d-flex align-items-center mb-2">
                            <a href="@($"/request/{r.Id}")">Request @r.Id</a>
                            @if (r?.Status is not null)
                            {
                                <span class="status-badge ms-3 @StatusClass(r.Status)">
                                    @r.Status
                                </span>
                            }
                            else
                            {
                                <span class="text-danger ms-3">[Missing Status]</span>
                            }
                        </li>
                    }
                </ul>
            }

        </div>
    </div>
</div>

@code {
    private string DisplayName = "User";
    private List<EquipmentRequest>? requests;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            requests = await Db.EquipmentRequests
                .OrderByDescending(r => r.SubmittedAt)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }

    private void HandleNew() => Nav.NavigateTo("/request/new");

    private static string StatusClass(string status) => status switch
    {
        "Approved" => "status-approved",
        "Denied" => "status-denied",
        "Needs More Info" or "Pending" => "status-pending",
        _ => "status-neutral"
    };
}
