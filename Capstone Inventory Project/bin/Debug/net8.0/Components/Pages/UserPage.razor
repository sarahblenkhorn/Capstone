@page "/user"
@inject NavigationManager Nav
@inject ApplicationDbContext Db
@rendermode InteractiveServer

<style>
    .user-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f8f9fa;
    }

    .user-box {
        width: 100%;
        max-width: 700px;
        padding: 2rem;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        background-color: #fff;
        position: relative;
    }

    .signout-link {
        position: absolute;
        top: 1rem;
        right: 1rem;
    }

    .user-header {
        text-align: center;
        margin-top: 2rem; 
    }

    .request-button {
        display: flex;
        justify-content: center;
        margin: 1.5rem 0;
    }

    .request-list {
        padding-left: 0;
        margin-left: 0;
    }

    .request-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: .25rem 0;
    }

    .request-status {
        min-width: 140px;
        text-align: right;
    }

    .status-approved {
        color: green;
        font-weight: bold;
    }

    .status-denied {
        color: red;
        font-weight: bold;
    }

    .status-pending {
        color: orange;
        font-weight: bold;
    }

    .status-neutral {
        color: gray;
        font-weight: bold;
    }
</style>

<div class="user-container">
    <div class="user-box">
        <a href="/login" class="signout-link">Sign out</a>

        <div class="user-header">
            <h1 class="form-title">Hello, @DisplayName</h1>
        </div>

        <div class="request-button">
            <button class="btn btn-primary" @onclick="HandleNew">
                Submit a New Request
            </button>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-2">
            <h2 class="form-title mb-0">My Requests</h2>
        </div>
        <hr />


        @if (!string.IsNullOrEmpty(loadError))
        {
            <div class="alert alert-danger">@loadError</div>
        }
        else if (requests is null)
        {
            <p class="text-center">Loading…</p>
        }
        else if (requests.Count == 0)
        {
            <p class="text-center">No requests yet.</p>
        }
        else
        {
            <ul class="list-unstyled mt-3 request-list">
                @foreach (var r in requests)
                {
                    <li class="d-flex align-items-center justify-content-between mb-2">
                        <a href="@($"/request/{r.Id}")">Request @r.Id</a>
                        @if (r?.Status is not null)
                        {
                            <span class="@StatusClass(r.Status) request-status">
                                @r.Status
                            </span>
                        }
                        else
                        {
                            <span class="text-danger">[Missing Status]</span>
                        }
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    private string DisplayName = "User";
    private List<EquipmentRequest>? requests;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            requests = await Db.EquipmentRequests
                .OrderByDescending(r => r.SubmittedAt)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }

    private void HandleNew() => Nav.NavigateTo("/request/new");

    private static string StatusClass(string status) => status switch
    {
        "Approved" => "status-approved",
        "Denied" => "status-denied",
        "Needs More Info" or "Pending" => "status-pending",
        _ => "status-neutral"
    };
}
